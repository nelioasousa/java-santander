package com.example;

import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.MongoException;
import com.mongodb.ServerApi;
import com.mongodb.ServerApiVersion;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

/**
 * Generated by cloud.mongodb.com
 */
public class MongoClientConnectionExample {
    public static void run(String connectionString) {
        /**
         * `ServerApi` is part of the mongodb Stable API:
         * >>> https://www.mongodb.com/docs/manual/reference/stable-api/
         * 
         * It allows database server updates that compromise backward compatibi-
         * lity to still function even if the application code that accesses the
         * database uses an API that isn't compatible with the new database ser-
         * ver API. It's like a bridge between application code written using a
         * API incompatible with the new API of the new database version.
         * 
         * The database server must support the API version specified by the
         * application. This, in conjunction with the use of only commands and
         * features supported by the specified API version, is necessary to ma-
         * intain backwards compatibility.
         */
        ServerApi serverApi = ServerApi.builder()
                .version(ServerApiVersion.V1)
                .strict(false)
                .build();

        MongoClientSettings settings = MongoClientSettings.builder()
                .applyConnectionString(new ConnectionString(connectionString))
                .serverApi(serverApi)
                .build();

        /**
         * `MongoClients` is a factory of `MongoClient` objects.
         * `MongoClient` isn't a connection. It is a more embracing concept.
         * The documentation says:
         * |   A client-side representation of a MongoDB cluster. Instances can
         * |   represent either a standalone MongoDB instance, a replica set, or
         * |   a sharded cluster. Instance of this class are responsible for ma-
         * |   intaining an up-to-date state of the cluster, and possibly cache
         * |   resources related to this, including background threads for moni-
         * |   toring, and connection pools.
         * The term 'database' in MongoDB is more like a namespace of collecti-
         * ons. There is no namespace nesting in MongoDB.
         */
        try (MongoClient mongoClient = MongoClients.create(settings)) {
            try {
                // Send a ping to confirm a successful connection
                MongoDatabase database = mongoClient.getDatabase("admin");
                database.runCommand(new Document("ping", 1));
                System.out.println("Pinged your deployment. You successfully connected to MongoDB!");
            } catch (MongoException e) {
                e.printStackTrace();
            }
        }
    }
}
